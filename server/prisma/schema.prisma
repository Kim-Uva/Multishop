// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // la bd en la carpeta env
  url      = env("DATABASE_URL")
}

//Base de datos
//Usuarios
model Usuario {
  id                Int                @id @default(autoincrement())
  nombre            String
  apellidos         String
  nombreProveedor   String? // ? puede ser nulo
  correo            String             @unique
  contrasenna       String
  fechaRegistro     DateTime           @default(now())
  rol               Rol
  idUbicacion       Int
  ubicacion         Ubicacion          @relation(fields: [idUbicacion], references: [idProvincia]) // Llave foranea
  bodegaProductos   BodegaProductos[]
  encabezadoCompras EncabezadoCompra[]
}

//Estado
model Estado {
  id      Int      @id @default(autoincrement())
  estado  String
  pedidos Pedido[]
}

//Roles
enum Rol {
  Administrador
  Encargado
  Proveeedor
}

//Categoria
model Categoria {
  id           Int            @id @default(autoincrement())
  nombre       String
  subCategoria SubCategoria[]
}

model SubCategoria {
  id          Int        @id @default(autoincrement())
  idCategoria Int
  nombre      String
  categoria   Categoria  @relation(fields: [idCategoria], references: [id]) // Llave foranea
  producto    Producto[]
}

//Producto
model Producto {
  id              Int               @id @default(autoincrement())
  codigoProducto  String
  nombre          String
  descripcion     String
  idSubCategoria  Int
  stock           Int
  precio          Decimal           @db.Decimal(10, 2)
  subCategorias   SubCategoria      @relation(fields: [idSubCategoria], references: [id]) // Llave foranea
  foto            Foto[]
  bodegaProductos BodegaProductos[]
  detalleCompras  DetalleCompra[]
}

model Foto {
  id         Int      @id @default(autoincrement())
  idProducto Int
  foto       Bytes
  productos  Producto @relation(fields: [idProducto], references: [id]) // Llave foranea
}

//Ubicaciones
model Ubicacion {
  id          Int         @id @default(autoincrement())
  idProvincia Int         @unique
  idCanton    Int         @unique
  idDistrito  Int         @unique
  idBarrio    Int         @unique
  usuario     Usuario[]
  bodega      Bodega[]
  provincia   Provincia[]
  cantones    Canton[]
  distritos   Distrito[]
  barrios     Barrio[]
}

model Provincia {
  id        Int        @id @default(autoincrement())
  nombre    String
  cantones  Canton[]
  distritos Distrito[]
  barrios   Barrio[]

  ubicacion Ubicacion @relation(fields: [id], references: [idProvincia]) // Llave foranea
}

model Canton {
  id          Int       @id @default(autoincrement())
  idProvincia Int
  nombre      String
  provincias  Provincia @relation(fields: [idProvincia], references: [id]) // Llave foranea
  ubicacion   Ubicacion @relation(fields: [id], references: [idCanton]) // Llave foranea

  distritos Distrito[]
  barrios   Barrio[]
}

model Distrito {
  id          Int       @id @default(autoincrement())
  idProvincia Int
  idCanton    Int
  nombre      String
  provincias  Provincia @relation(fields: [idProvincia], references: [id]) // Llave foranea
  cantones    Canton    @relation(fields: [idCanton], references: [id]) // Llave foranea
  ubicacion   Ubicacion @relation(fields: [id], references: [idDistrito]) // Llave foranea

  barrios Barrio[]
}

model Barrio {
  id          Int    @id @default(autoincrement())
  idProvincia Int
  idCanton    Int
  idDistrito  Int
  nombre      String

  provincias Provincia @relation(fields: [idProvincia], references: [id]) // Llave foranea
  cantones   Canton    @relation(fields: [idCanton], references: [id])
  distritos  Distrito  @relation(fields: [idDistrito], references: [id])
  ubicacion  Ubicacion @relation(fields: [id], references: [idBarrio])
}

//Bodegas
model Bodega {
  id              Int               @id @default(autoincrement())
  nombre          String
  idUbicacion     Int
  tamanno         Float
  capacidad       Float
  ubicacion       Ubicacion         @relation(fields: [idUbicacion], references: [id])
  bodegaProductos BodegaProductos[]
  detalleCompras  DetalleCompra[]
}

model BodegaProductos {
  //Bodega
  idBodega Int
  bodegas  Bodega @relation(fields: [idBodega], references: [id])

  //Producto
  idProducto Int
  producto   Producto @relation(fields: [idProducto], references: [id])

  //Usuario
  idUsuario Int
  usuario   Usuario @relation(fields: [idUsuario], references: [id])

  fechaRegistro DateTime @default(now())
  cantidad      Int
  seguridad     Boolean

  @@id([idBodega, idProducto, idUsuario])
}

//Compras y pedidos
model EncabezadoCompra {
  id                 Int             @id @default(autoincrement())
  fechaCompra        DateTime        @default(now())
  idUsuarioProveedor Int
  idUsuarioRegistro  Int
  usuarioProveedor   Usuario         @relation(fields: [idUsuarioProveedor], references: [id])
  detalleCompras     DetalleCompra[]
  pedidos            Pedido[]
}

model DetalleCompra {
  id                 Int              @id @default(autoincrement())
  idEncabezadoCompra Int
  idProducto         Int
  idBodega           Int
  cantidad           Int
  productos          Producto         @relation(fields: [idProducto], references: [id])
  encabezadoCompras  EncabezadoCompra @relation(fields: [idEncabezadoCompra], references: [id])
  bodegas            Bodega           @relation(fields: [idBodega], references: [id])
}

model Pedido {
  id                 Int              @id @default(autoincrement())
  idEncabezadoCompra Int
  fechaPedido        DateTime         @default(now())
  idEstado           Int
  encabezadoCompras  EncabezadoCompra @relation(fields: [idEncabezadoCompra], references: [id])
  estadoPedido       Estado           @relation(fields: [idEstado], references: [id])
}
